// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pingpong.proto

/*
Package pingpong is a generated protocol buffer package.

It is generated from these files:
	pingpong.proto

It has these top-level messages:
	PingMessage
	PongMessage
	StartMessage
	StopMessage
	PingReply
	PongReply
	StartReply
	StopReply
*/
package pingpong

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// Message
//
type PingMessage struct {
}

func (m *PingMessage) Reset()                    { *m = PingMessage{} }
func (m *PingMessage) String() string            { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()               {}
func (*PingMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PongMessage struct {
}

func (m *PongMessage) Reset()                    { *m = PongMessage{} }
func (m *PongMessage) String() string            { return proto.CompactTextString(m) }
func (*PongMessage) ProtoMessage()               {}
func (*PongMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StartMessage struct {
}

func (m *StartMessage) Reset()                    { *m = StartMessage{} }
func (m *StartMessage) String() string            { return proto.CompactTextString(m) }
func (*StartMessage) ProtoMessage()               {}
func (*StartMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StopMessage struct {
}

func (m *StopMessage) Reset()                    { *m = StopMessage{} }
func (m *StopMessage) String() string            { return proto.CompactTextString(m) }
func (*StopMessage) ProtoMessage()               {}
func (*StopMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PingReply struct {
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PongReply struct {
}

func (m *PongReply) Reset()                    { *m = PongReply{} }
func (m *PongReply) String() string            { return proto.CompactTextString(m) }
func (*PongReply) ProtoMessage()               {}
func (*PongReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type StartReply struct {
}

func (m *StartReply) Reset()                    { *m = StartReply{} }
func (m *StartReply) String() string            { return proto.CompactTextString(m) }
func (*StartReply) ProtoMessage()               {}
func (*StartReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type StopReply struct {
}

func (m *StopReply) Reset()                    { *m = StopReply{} }
func (m *StopReply) String() string            { return proto.CompactTextString(m) }
func (*StopReply) ProtoMessage()               {}
func (*StopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*PingMessage)(nil), "pingpong.PingMessage")
	proto.RegisterType((*PongMessage)(nil), "pingpong.PongMessage")
	proto.RegisterType((*StartMessage)(nil), "pingpong.StartMessage")
	proto.RegisterType((*StopMessage)(nil), "pingpong.StopMessage")
	proto.RegisterType((*PingReply)(nil), "pingpong.PingReply")
	proto.RegisterType((*PongReply)(nil), "pingpong.PongReply")
	proto.RegisterType((*StartReply)(nil), "pingpong.StartReply")
	proto.RegisterType((*StopReply)(nil), "pingpong.StopReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pingpong service

type PingpongClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingReply, error)
	Pong(ctx context.Context, in *PongMessage, opts ...grpc.CallOption) (*PongReply, error)
	Start(ctx context.Context, in *StartMessage, opts ...grpc.CallOption) (*StartReply, error)
	Stop(ctx context.Context, in *StopMessage, opts ...grpc.CallOption) (*StopReply, error)
}

type pingpongClient struct {
	cc *grpc.ClientConn
}

func NewPingpongClient(cc *grpc.ClientConn) PingpongClient {
	return &pingpongClient{cc}
}

func (c *pingpongClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/pingpong.Pingpong/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingpongClient) Pong(ctx context.Context, in *PongMessage, opts ...grpc.CallOption) (*PongReply, error) {
	out := new(PongReply)
	err := grpc.Invoke(ctx, "/pingpong.Pingpong/Pong", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingpongClient) Start(ctx context.Context, in *StartMessage, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := grpc.Invoke(ctx, "/pingpong.Pingpong/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingpongClient) Stop(ctx context.Context, in *StopMessage, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := grpc.Invoke(ctx, "/pingpong.Pingpong/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pingpong service

type PingpongServer interface {
	Ping(context.Context, *PingMessage) (*PingReply, error)
	Pong(context.Context, *PongMessage) (*PongReply, error)
	Start(context.Context, *StartMessage) (*StartReply, error)
	Stop(context.Context, *StopMessage) (*StopReply, error)
}

func RegisterPingpongServer(s *grpc.Server, srv PingpongServer) {
	s.RegisterService(&_Pingpong_serviceDesc, srv)
}

func _Pingpong_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingpongServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pingpong.Pingpong/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingpongServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pingpong_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingpongServer).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pingpong.Pingpong/Pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingpongServer).Pong(ctx, req.(*PongMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pingpong_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingpongServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pingpong.Pingpong/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingpongServer).Start(ctx, req.(*StartMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pingpong_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingpongServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pingpong.Pingpong/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingpongServer).Stop(ctx, req.(*StopMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pingpong_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pingpong.Pingpong",
	HandlerType: (*PingpongServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Pingpong_Ping_Handler,
		},
		{
			MethodName: "Pong",
			Handler:    _Pingpong_Pong_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Pingpong_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Pingpong_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pingpong.proto",
}

func init() { proto.RegisterFile("pingpong.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xc8, 0xcc, 0x4b,
	0x2f, 0xc8, 0xcf, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x78,
	0xb9, 0xb8, 0x03, 0x32, 0xf3, 0xd2, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0xc1, 0xdc, 0x7c,
	0x04, 0x97, 0x8f, 0x8b, 0x27, 0xb8, 0x24, 0xb1, 0xa8, 0x04, 0x49, 0x3a, 0xb8, 0x24, 0xbf, 0x00,
	0xc6, 0xe5, 0xe6, 0xe2, 0x04, 0x69, 0x0e, 0x4a, 0x2d, 0xc8, 0xa9, 0x04, 0x73, 0xf2, 0x61, 0x1c,
	0x1e, 0x2e, 0x2e, 0xb0, 0x46, 0xb8, 0x14, 0x48, 0x1b, 0x98, 0x63, 0xf4, 0x94, 0x91, 0x8b, 0x23,
	0x00, 0x6a, 0xbd, 0x90, 0x09, 0x17, 0x0b, 0x88, 0x2d, 0x24, 0xaa, 0x07, 0x77, 0x21, 0x92, 0x73,
	0xa4, 0x84, 0x51, 0x85, 0x21, 0xa6, 0x31, 0x80, 0x75, 0xe5, 0xa3, 0xe9, 0xca, 0xc7, 0xae, 0x2b,
	0x1f, 0xa1, 0xcb, 0x9c, 0x8b, 0x15, 0xec, 0x26, 0x21, 0x31, 0x84, 0x3c, 0xb2, 0xef, 0xa4, 0x44,
	0xd0, 0xc4, 0x91, 0xac, 0x03, 0x39, 0x1f, 0xd9, 0x3a, 0xa4, 0x50, 0x40, 0xb6, 0x0e, 0xee, 0x4b,
	0x25, 0x86, 0x24, 0x36, 0x70, 0x50, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x61, 0x52,
	0xb0, 0x7c, 0x01, 0x00, 0x00,
}
