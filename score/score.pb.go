// Code generated by protoc-gen-go. DO NOT EDIT.
// source: score.proto

/*
Package score is a generated protocol buffer package.

It is generated from these files:
	score.proto

It has these top-level messages:
	SetMessage
	GetMessage
	ResetMessage
	SetReply
	GetReply
	ResetReply
*/
package score

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// Message
//
type SetMessage struct {
}

func (m *SetMessage) Reset()                    { *m = SetMessage{} }
func (m *SetMessage) String() string            { return proto.CompactTextString(m) }
func (*SetMessage) ProtoMessage()               {}
func (*SetMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetMessage struct {
}

func (m *GetMessage) Reset()                    { *m = GetMessage{} }
func (m *GetMessage) String() string            { return proto.CompactTextString(m) }
func (*GetMessage) ProtoMessage()               {}
func (*GetMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ResetMessage struct {
}

func (m *ResetMessage) Reset()                    { *m = ResetMessage{} }
func (m *ResetMessage) String() string            { return proto.CompactTextString(m) }
func (*ResetMessage) ProtoMessage()               {}
func (*ResetMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SetReply struct {
}

func (m *SetReply) Reset()                    { *m = SetReply{} }
func (m *SetReply) String() string            { return proto.CompactTextString(m) }
func (*SetReply) ProtoMessage()               {}
func (*SetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetReply struct {
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ResetReply struct {
}

func (m *ResetReply) Reset()                    { *m = ResetReply{} }
func (m *ResetReply) String() string            { return proto.CompactTextString(m) }
func (*ResetReply) ProtoMessage()               {}
func (*ResetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*SetMessage)(nil), "score.SetMessage")
	proto.RegisterType((*GetMessage)(nil), "score.GetMessage")
	proto.RegisterType((*ResetMessage)(nil), "score.ResetMessage")
	proto.RegisterType((*SetReply)(nil), "score.SetReply")
	proto.RegisterType((*GetReply)(nil), "score.GetReply")
	proto.RegisterType((*ResetReply)(nil), "score.ResetReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Score service

type ScoreClient interface {
	Set(ctx context.Context, in *SetMessage, opts ...grpc.CallOption) (*SetReply, error)
	Get(ctx context.Context, in *GetMessage, opts ...grpc.CallOption) (*GetReply, error)
	Reset(ctx context.Context, in *ResetMessage, opts ...grpc.CallOption) (*ResetReply, error)
}

type scoreClient struct {
	cc *grpc.ClientConn
}

func NewScoreClient(cc *grpc.ClientConn) ScoreClient {
	return &scoreClient{cc}
}

func (c *scoreClient) Set(ctx context.Context, in *SetMessage, opts ...grpc.CallOption) (*SetReply, error) {
	out := new(SetReply)
	err := grpc.Invoke(ctx, "/score.Score/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) Get(ctx context.Context, in *GetMessage, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/score.Score/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) Reset(ctx context.Context, in *ResetMessage, opts ...grpc.CallOption) (*ResetReply, error) {
	out := new(ResetReply)
	err := grpc.Invoke(ctx, "/score.Score/Reset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Score service

type ScoreServer interface {
	Set(context.Context, *SetMessage) (*SetReply, error)
	Get(context.Context, *GetMessage) (*GetReply, error)
	Reset(context.Context, *ResetMessage) (*ResetReply, error)
}

func RegisterScoreServer(s *grpc.Server, srv ScoreServer) {
	s.RegisterService(&_Score_serviceDesc, srv)
}

func _Score_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.Score/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).Set(ctx, req.(*SetMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.Score/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).Get(ctx, req.(*GetMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.Score/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).Reset(ctx, req.(*ResetMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Score_serviceDesc = grpc.ServiceDesc{
	ServiceName: "score.Score",
	HandlerType: (*ScoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Score_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Score_Get_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Score_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "score.proto",
}

func init() { proto.RegisterFile("score.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x4e, 0xce, 0x2f,
	0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x78, 0xb8, 0xb8, 0x82,
	0x53, 0x4b, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0xc1, 0x3c, 0x77, 0x04, 0x8f, 0x8f, 0x8b, 0x27,
	0x28, 0xb5, 0x18, 0xc1, 0xe7, 0xe2, 0xe2, 0x08, 0x4e, 0x2d, 0x09, 0x4a, 0x2d, 0xc8, 0xa9, 0x04,
	0xb1, 0xdd, 0x61, 0x6c, 0x1e, 0x2e, 0x2e, 0xb0, 0x3a, 0x30, 0xcf, 0x68, 0x0a, 0x23, 0x17, 0x6b,
	0x30, 0xc8, 0x6c, 0x21, 0x6d, 0x2e, 0xe6, 0xe0, 0xd4, 0x12, 0x21, 0x41, 0x3d, 0x88, 0xbd, 0x08,
	0x7b, 0xa4, 0xf8, 0x11, 0x42, 0x10, 0x23, 0x18, 0x40, 0x8a, 0xdd, 0x91, 0x14, 0xbb, 0x63, 0x2a,
	0x76, 0x47, 0x28, 0x36, 0xe4, 0x62, 0x05, 0xdb, 0x28, 0x24, 0x0c, 0x95, 0x43, 0x76, 0xa7, 0x94,
	0x20, 0xb2, 0x20, 0x54, 0x4b, 0x12, 0x1b, 0xd8, 0xdb, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x5f, 0xdb, 0xaa, 0xcc, 0x05, 0x01, 0x00, 0x00,
}
